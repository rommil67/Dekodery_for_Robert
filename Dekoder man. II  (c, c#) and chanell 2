// Tested Arduino Mega
//Author Romuald Milewski
// Dekoder for manual, Pedal and Registry for pipe organ
// Arduino Mega and Mega2560
#include <MIDI.h>   // Add Midi Library
 
//#define LED 13 
//#define LED2 12// Arduino Board LED is on Pin 13

#define decoder_channel 2 // the selected MIDI channel on which the decoder works
#define decoder_channel_registry 6 // the selected MIDI channel on which the decoder works
//int pins[] = {A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30};
// int pins[] = {A0, A2, A4, A6, A8, A10, A12, A14, 31, 33, 35, 37, 39, 41, 43, 45      A1, A3, A5, A7, A9, A11, A13, A15, 32, 34, 36, 38, 40, 42, 44, 46,     2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30,  3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29};
int pins[] = {A0, 32, A1, 33, A2, 34, A3, 35, A4, 36, A5, 37, A6, 38, A7, 39, A8, 40, A9, 41, A10, 42, A11, 43, A12, 44, A13, 45, A14, 46, A15, 47,   2, 18, 3, 19, 4, 20, 5, 21, 6, 22, 7, 23, 8, 24, 9, 25, 10, 26, 11, 27, 12, 28, 13, 29, 14, 30, 15, 48, 16, 49, 17};
int pins_reg[] = {50,51,52,53,54};                

// dla I manua≈Çu tak:

//int pins[] = {3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12,     19, 18, 21, 20, 23, 22, 25, 24, 27, 26, 29, 28, 31, 30,    A14, A15, A12, A13, A10, A11, A8, A9, A6, A7, A4, A5, A2, A3, A0, A1,   46, 47, 44, 45, 42, 43, 40, 41, 38, 39, 36, 37, 34, 35, 32, 33};
// 15, 14, 17, 16, 
// 

//Create an instance of the library with default name, serial port and settings
MIDI_CREATE_DEFAULT_INSTANCE();
 
void setup() {
  
     // setup pins for output ( Pedal )
  for (int i = 0; i < sizeof(pins) / sizeof(pins[0]); ++i) {
    pinMode(pins[i], OUTPUT);
    digitalWrite (pins[i], LOW);
  }    
     // setup pins_reg for output ( Registry in pedal )
  for (int i = 0; i < sizeof(pins_reg) / sizeof(pins_reg[0]); ++i) {
    pinMode(pins_reg[i], OUTPUT);
    digitalWrite (pins_reg[i], LOW);    
    
  }

 
      // self-test  jesli potrzebny
//  for (int i = 0; i < sizeof(pins) / sizeof(pins[0]); ++i) {
//    digitalWrite(pins[i], HIGH);
//    delay(300); // Czas trwania stanu wysokiego - 300 ms
//    digitalWrite(pins[i], LOW);
//    delay(50);  // Dodatkowy czas dla lepszego zobaczenia efektu
//  }



  MIDI.begin(MIDI_CHANNEL_OMNI); // Initialize the Midi Library.
  // OMNI sets it to listen to all channels.. MIDI.begin(2) would set it
  // to respond to notes on channel 2 only.
  MIDI.setHandleNoteOn(MyHandleNoteOn); // This is important!! This command
  // tells the Midi Library which function you want to call when a NOTE ON command
  // is received. In this case it's "MyHandleNoteOn".
  MIDI.setHandleNoteOff(MyHandleNoteOff); // This command tells the Midi Library
  // to call "MyHandleNoteOff" when a NOTE OFF command is received.
}
 
void loop() { // Main loop
  MIDI.read(); // Continuously check if Midi data has been received.
}
 
// MyHandleNoteON is the function that will be called by the Midi Library
// when a MIDI NOTE ON message is received.
// It will be passed bytes for Channel, Pitch, and Velocity

void MyHandleNoteOn(byte channel, byte pitch, byte velocity) {
 if (channel == decoder_channel){
  if (pitch >= 36 && pitch <= (36 + ( sizeof(pins) / sizeof(pins[0] )))){
   for (int i = 0; i < sizeof(pins) / sizeof(pins[0]); ++i) {
    if (pitch == 36+i) {
     digitalWrite (pins[i], HIGH); // Set Arduino board pins to high
    } 
   } 
  } 
 } 
 
 if (channel == decoder_channel_registry) {
  if (pitch >= 36 && pitch <= (36 + ( sizeof(pins_reg) / sizeof(pins_reg[0] )))){
   for (int i = 0; i < sizeof(pins_reg) / sizeof(pins_reg[0]); ++i) {
    if (pitch == 36+i) {
     digitalWrite (pins_reg[i], HIGH); // Set Arduino board pins_reg to high
    }
   }    
  }
 } 
}
 
// MyHandleNoteOFF is the function that will be called by the Midi Library
// when a MIDI NOTE OFF message is received.
// * A NOTE ON message with Velocity = 0 will be treated as a NOTE OFF message *
// It will be passed bytes for Channel, Pitch, and Velocity

void MyHandleNoteOff(byte channel, byte pitch, byte velocity) {
 if (channel == decoder_channel) {  
   if (pitch >= 36 && pitch <= (36 + ( sizeof(pins) / sizeof(pins[0] )))){
     for (int i = 0; i < sizeof(pins) / sizeof(pins[0]); ++i) {
       if (pitch == 36+i) {
         digitalWrite (pins[i], LOW); // Set Arduino board pins_reg to low
       } 
     }
   }  
 } 
 if (channel == decoder_channel_registry) {  
  if (pitch >= 36 && pitch <= (36 + ( sizeof(pins_reg) / sizeof(pins_reg[0] )))){
     for (int i = 0; i < sizeof(pins_reg) / sizeof(pins_reg[0]); ++i) {
       if (pitch == 36+i) {
          digitalWrite (pins_reg[i], LOW); // Set Arduino board pins_reg to low
       } 
     }
  }
 } 
}  
